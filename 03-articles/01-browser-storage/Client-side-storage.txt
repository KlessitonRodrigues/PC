CLIENT-SIDE STORAGE

Mordern Web browser suppport a number of ways for web
sites to store data on the user's computer - with the
user permission - the retrieve it when necessary.

This lets you persist data for long-term storage, save
sites or documents for offline use, retain user-spefic
settings for your site, and more.



OLD SCHOOL: COOKIES

The concept of client-side storage has been around for
long time. Since the early days of the web, sites have
used cookies to store information to personalize user
experience on websites.

They're the earliest form of client-side storage 
commonly used on the web.



NEW SCHOOL: WEB STORAGE AND INDEXED DB

-> The Web Storage API provides a very simple syntax for 
storing and retrieving smaller, data items consisting
of a name and a corresponding value.

This is useful when you just need to store some simple 
data, like the user's name, whether they are logged in, 
what color to use for the background of the screen, etc.

-> The IndexedDB API provides the browser with a complete
database system for storing complex data. This can be used
for things from complete sets of customer records to even
complex data types like audio or videos files.



THE FUTURE: CACHE API
Some modern browsers support the new Cache API. This API is 
designed for storing HTTP responses to specific requests,
and is very useful for doing things like storing website
assets offline so the site can subsequently be used without
a network connection.

Cache is usually used in combination with the Service Worker
API. although it doesn't have to be.



STORING SIMPLE DATA - WEB STORAGE
The Web Storage API is very easy to use - you store simple 
name/value pairs of data (limited to strings, numbers, etc)
and retrieve these values when needed.

-> All of web storage data is contained within two 
object-like structures inside the browser: sessionStorage
and localStorage.

The first one persists data for as long as the browser is
open (the data is lost when the browser is closed) and the 
second one persists data even after the browser is closed
and opened again.

Storage: localStorege, sessionStorage
Storage.setItem()
Storage.getItem()
Storage.removeItem()



STORING COMPLEX DATA - INDEXED DB
The indexedDB API (sometimes abbreviated IDB) is a complete 
database system available in the browser in which you can 
store complex related data. the types of which aren't limited
to simple values like strings and numbers. You can store 
videos, images, and pretty much anything else in an indexedDB 
instance.

However, this does come at a cost: IndexedDB is much more 
complex to use that the Web Store API.


-> Database initial set up

    let db;
    let request = window.indexedDB.open("notes_db", 1)

this line create a request to open version 1 of a database
called notes_db. if this doesn't already exist, it will be 
created.

you will seen this request pattern used very often throughout
indexed DB. Database operations take time.

you don't want to hang the browser while you wait for the 
results, so database operations are asynchronous.

To handle this in indexedDB, you create a request object. You
then use event handlers to run code when the request completes, 
fails, etc.

NOTE: 
The version is important, if you want to upgrade your
database (for example, by changing the table structure), you
have to run your code with an incresed version number.

on error handler signifies that the database didn't open
successfully

    request.onerror = () => {
        console.log("database failed to open")
    }

onsuccess handler signifies that the database opened 
successfully

    request.onsuccess = () => {
        console.log("Database opened successfully")

        db = request.result
    }

Finally, we'll add probably the most important event handler
for setting up the database: request.onupgradeneeded.

This handler runs if the database has not already been set up,
or if the databasse is opened with a bigger version number than 
the existing stored database (when performming an upgrade).

    // Setup the database tables if this has not already been 
    // done
    request.onupgradeneeded = e => {

        // Grab a references to the opened databse
        let db = e.target.result

        // Create an objectStore
        let objectStore = db.createObjectStore("notes_os", 
        { keyPath: "id", autoIncrement: true }
        )

        // Define what data items the objectStore will contain
        objectStore.createIndex("title", "title", { unique: false })
        objectStore.createIndex("body", "body", { unique: false })
    }


This is where we define the schema (structure) of our database;
that is, the set of columns (of fields) it conteins.

Here we first grab a reference to the existing database from
the result property of the event target (e.target.result),
which










LINK: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage
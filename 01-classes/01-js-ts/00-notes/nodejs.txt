#123 - NODE - MODULE OBJECT

-> Export

-> file1.js
    module.exports === exports === this // true ???

    module.exports.key = variable
    exports.key = variable
    this.key = variable


// override module.exports

const a = "A"
const b = "B"
const c = "C"

module.export = {
    a, b, c
}

-> Import

-> file2.js
    const moduleFile1 = require("./file1")

    const variable = require("./file1").key

    const {key} = require("./file1")



#124 - NODE - PATH - __DIRNAME / __FILENAME

-> __filename
retorna o caminho do arquivo atual, apartir da raiz 
do sistema.

-> __dirname
retorna o caminho do diretório atual, apartir da raiz
do sistema

-> path
resolve o caminho de diretório, em caso de conflito entre
sistemas operacionais.

    const path = require("path")

    path.resolve(__dirname, "..", "..", "folder", "file.js")



#125 - NODE - NPM

-> semantic version
1.          2.          3
^- Major    ^- Minor    ^- Patch

-> versionamento

// " ^ " séra permitido atualizar o (Minor e Patch)
"express":"^4.15.0" 

// " ~ " séra permitido atualizar o (Patch)

-> npm
npm i // instalar packages

npm i express@3.x // instalar versão 3 mais recente

npm uninstall // remover packages

npm update // atualiza os packages

npm ls // lista de packages

npm ls --depth=0 // packages do úsuario

npm outdated // packages desatualizados



#127 - NODE - FS (FileSystem)

-> fs.readdir(path)
retorna os arquivos/diretótios encontrados

-> fs.stat(path)
retorna informações sobre o arquivo/diretório



#128 - NODE - FS - JSON

-> fs.writeFile(path, text, {flag, encode})
// realiza a escrita em um arquivo

flag: w - re-write / a - append

-> fs.readFile(path, encode)
// realiza a leitura de um arquivo


-> JSON Stringfy/Parse

JSON.stringfy(obj) // retorna um obj json

JSON.parse(jsonObj) // retorna um obj javascript



#129 - NODE - EXPRESS

CRUD:  CREATE  READ  UPDATE DELETE
HTTP:  POST    GET   PUT    DELETE



#131 - NODE - EXPRESS

-> req.params
?: opcional

URL: http:// ex.com/profile/32
GET: http:// ex.com/profile/:userId?

req.params.userId


-> req.query
URL: http:// ex.com/?key1=value1&key2=value2
GET: http:// ex.com/

req.query -> {key1: value1, ke2: value2}


-> req.body
express: app.use(express.urlencoded(extended: true))

POST: <input name="nameField" /> 

req.body.nameField



#136 - NODE - EXPRESS - MIDDLEWARES

-> route middleware
const middleware = (req, res, next) => {
    console.log("intercept by middleware")    
    next()
}

app.get("/", middleware, (req, res) => {
    resp.send("end")
})


-> global middleware
const middleware = (req, res, next) => {
    console.log("intercept by middleware")    
    next()
}

app.use(middleware)


-> requisition session
const alterSession(req, res, next){
    req.session = {id: 01}
    next()
}

app.get("/", alterSession, (req, res) => {
    console.log( req.session.id )
})



#139

npm: dotenv (criar variáveis de ambiente)



#141 - EXPRESS - SESSION - FLASH MESSAGES
npm: express-session connect-mongo connect-flash

-> server.js

    const session = require("express-session")
    const mongoStore = require("connect-mongo")
    const flash = require("connect-flash")

    const sessionOptions = {
        secret: "anyfjisjfijsurfuisnfunun",
        store: mongoStore.create(
            {mongoUrl: process.env.CONNECTIONSTRING}
        ),
        resave: false,
        saveUninitialized: false,
        cookie: {
            mazAge: 1000 * 60 * 60 * 24 * 7,
            httpOnly: true
        }}

    app.use(sessionOptions)
    app.use(flash())


    app.get("/", (req, res) => {
        
        req.flash("message")

        req.session.user = {name: "userName"}
    })



#142 - EXPRESS - EJS

-> variáveis globais
app.use((req, res, next) => {
    res.locals.user = {name: "userName"}
    next()
})

-> variáveis por rota
app.get("/", (req, res) => {
    res.locals.user = {name: "userName"}
})

-> variáveis por render
app.get("/", (req, res) => {
    res.render("file", {
        user: "userName"
    })
})

-> EJS
<%   %> - JavaScript
<%=  %> - exibir
<%-  %> - interpretar HTML
<%#  %> - comentário
<%- include("path") %> - importar ejs



#144 - EXPRESS
npm:
helmet - express segurity middleware
csurf - origin form validator middleware

